// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures=["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model idea_user{
  id Int @id @default(autoincrement())
  email String? @unique
  name String
  password String
  avatar String?
  job String?
  company String?
  country String?
  city String?
  URL String?
  Facebook String?
  Youtube String?
  Github String?
  Twitter String?
  Instagram String?
  LinkedIn String?
  Twitch String?
  Dribble String?
  introduce String? @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  portfolio idea_project[]
  like idea_like[]
  comments idea_comment[]
  followers idea_follow[] @relation(name:"followerUser") 
  followings idea_follow[] @relation(name:"followingUser")
  record Record[]
  moodboards idea_moodboard[]
  streams idea_stream[]
  messages idea_message[]
}

model idea_project{
  id Int @id @default(autoincrement())
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  tags String
  tools String
  category String
  visible Boolean
  description String @db.MediumText
  owner String
  like idea_like[]
  view Int
  avatar String
  comments idea_comment[]
  record Record[]
  moodboard idea_moodboard @relation(fields: [moodboardId],references: [id],onDelete: Cascade)
  moodboardId Int @default(1)
}

model idea_like{
  id Int @id @default(autoincrement())
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  project idea_project @relation(fields: [projectId],references: [id],onDelete: Cascade)
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model idea_comment{
  id Int @id @default(autoincrement())
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  project idea_project @relation(fields: [projectId],references: [id],onDelete: Cascade)
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment String @db.MediumText
}

model idea_follow{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  follower idea_user @relation(name:"followerUser",fields: [followerId],references: [id],onDelete: Cascade)
  followerId Int
  following idea_user @relation(name:"followingUser",fields: [followingId],references: [id],onDelete: Cascade)
  followingId Int
}

model idea_stream{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  description String
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  tools String?
  messages idea_message[]
  cloudflareId String
  cloudflareUrl String
  cloudflareKey String

}

model idea_message{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  message String @db.MediumText
  stream idea_stream @relation(fields: [streamId],references: [id],onDelete: Cascade)
  streamId Int
  
}

model Record{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project idea_project @relation(fields: [projectId],references: [id],onDelete: Cascade)
  projectId Int
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  kind Kind
}


model idea_moodboard{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  projects idea_project[]
}


enum Kind{
  Work
  Moodboard
  Like
}