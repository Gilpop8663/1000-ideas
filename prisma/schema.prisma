// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures=["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
  
  
}



model idea_user{
  id Int @id @default(autoincrement())
  email String? @unique
  name String
  password String
  avatar String?
  job String?
  company String?
  country String?
  city String?
  URL String?
  Facebook String?
  Youtube String?
  Github String?
  Twitter String?
  Instagram String?
  LinkedIn String?
  Twitch String?
  Dribble String?
  introduce String? @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bannerSrc String?
  bannerPosition String?
  view idea_projectView[]
  portfolio idea_project[]
  like idea_like[]
  comments idea_comment[]
  followers idea_follow[] @relation(name:"followerUser") 
  followings idea_follow[] @relation(name:"followingUser")
  moodboards idea_moodboard[]
  streams idea_stream[]
  messages idea_message[]
  jointOwner idea_projectOwner[]

}

model idea_project{
  id Int @id @default(autoincrement())
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  tags idea_projectTag[]
  tools idea_projectTool[]
  category idea_projectCategory[]
  visible Boolean
  description String @db.MediumText
  thumbnail String
  owner idea_projectOwner[]
  like idea_like[]
  view idea_projectView[]
  comments idea_comment[]
  moodboard idea_moodboard @relation(fields: [moodboardId],references: [id],onDelete: Cascade)
  moodboardId Int @default(1)
  contents idea_projectContent[]
  isDraft Boolean @default(false)
  @@index([userId])
}

model idea_like{
  id Int @id @default(autoincrement())
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  project idea_project @relation(fields: [projectId],references: [id],onDelete: Cascade)
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([projectId])

}

model idea_comment{
  id Int @id @default(autoincrement())
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  project idea_project @relation(fields: [projectId],references: [id],onDelete: Cascade)
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment String @db.MediumText
  @@index([userId])
  @@index([projectId])
}

model idea_follow{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  follower idea_user @relation(name:"followerUser",fields: [followerId],references: [id],onDelete: Cascade)
  followerId Int
  following idea_user @relation(name:"followingUser",fields: [followingId],references: [id],onDelete: Cascade)
  followingId Int
  @@index([followerId])
  @@index([followingId])
}

model idea_stream{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  description String
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  tools String?
  messages idea_message[]
  cloudflareId String
  cloudflareUrl String
  cloudflareKey String
  @@index([userId])
}

model idea_message{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  message String @db.MediumText
  stream idea_stream @relation(fields: [streamId],references: [id],onDelete: Cascade)
  streamId Int
  @@index([userId])
  @@index([streamId])

  
}



model idea_moodboard{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  projects idea_project[]
  @@index([userId])
}


model idea_projectContent{
  id Int @id @default(autoincrement())
  project idea_project @relation(fields: [projectId],references: [id],onDelete: Cascade)
  projectId Int
  kind contentKind
  content String? @db.LongText
  imageSrc String?
  fontSize String?
  alignText String?
  language String?
  description String @db.MediumText() @default("")
  @@index([projectId])
}

model idea_projectTag{
  id Int @id @default(autoincrement())
  project idea_project @relation(fields: [projectId],references: [id],onDelete: Cascade)
  projectId Int
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([projectId])
}

model idea_projectTool{
  id Int @id @default(autoincrement())
  project idea_project @relation(fields: [projectId],references: [id],onDelete: Cascade)
  projectId Int
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([projectId])
}

model idea_projectCategory{
  id Int @id @default(autoincrement())
  project idea_project @relation(fields: [projectId],references: [id],onDelete: Cascade)
  projectId Int
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([projectId])
}

model idea_projectOwner{
  id Int @id @default(autoincrement())
  project idea_project @relation(fields: [projectId],references: [id],onDelete: Cascade)
  projectId Int
  name String
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([projectId])
}

model idea_projectView{
  id Int @id @default(autoincrement())
  project idea_project @relation(fields: [projectId],references: [id],onDelete: Cascade)
  projectId Int
  user idea_user @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([projectId])
  @@index([userId])
}



enum contentKind{
  text
  image
  code
}

enum Kind{
  Work
  Moodboard
  Like
}

model User {
  id        Int      @id @default(autoincrement())
  phone     Int?     @unique
  email     String?  @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model TutorUser {
  id        Int      @id @default(autoincrement())
  nickname  String   @unique
  email     String   @unique
  password  String
  phone     String      @unique
  avatar    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes TutorClass[]
}

model TutorToken {
  id        Int      @id @default(autoincrement())
  payload   String    
  phone String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TutorClass{
  id        Int      @id @default(autoincrement())
  user TutorUser @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  image String
  name String
  price Int
  tag1 String
  tag2 String
  tag3 String
  summary String @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}